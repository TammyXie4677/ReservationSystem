@model UpdateProfileViewModel

<h2>Manage Profile</h2>

<!-- Display success message if any -->
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}

<form method="post">
    <!-- First Name -->
    <div class="mb-3">
        <label asp-for="FirstName" class="form-label"></label>
        <input asp-for="FirstName" class="form-control" />
        <span asp-validation-for="FirstName" class="text-danger"></span>
    </div>

    <!-- Last Name -->
    <div class="mb-3">
        <label asp-for="LastName" class="form-label"></label>
        <input asp-for="LastName" class="form-control" />
        <span asp-validation-for="LastName" class="text-danger"></span>
    </div>

    <!-- Phone Number -->
    <div class="mb-3">
        <label asp-for="PhoneNumber" class="form-label"></label>
        <input asp-for="PhoneNumber" class="form-control" value="@Model.PhoneNumber" />
        <span asp-validation-for="PhoneNumber" class="text-danger"></span>
        @* <span id="phone-error" class="text-danger"></span> *@
    </div>


    <!-- Password -->
    <div class="mb-3">
        <label asp-for="Password" class="form-label"></label>
        <input asp-for="Password" type="password" class="form-control" />
        <span asp-validation-for="Password" class="text-danger"></span>
    </div>

    <!-- Confirm Password -->
    <div class="mb-3">
        <label asp-for="ConfirmPassword" class="form-label"></label>
        <input asp-for="ConfirmPassword" type="password" class="form-control" />
        <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
    </div>

    <!-- Submit button for profile update -->
    <div class="d-flex justify-content-between mt-4">
        <button type="submit" class="btn btn-primary">Update Profile</button>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Function to validate phone number with format xxx-xxx-xxxx
        function validatePhoneNumber() {
            const phoneInput = document.getElementById("PhoneNumber");
            const phoneError = document.getElementById("phone-error");
            const phoneRegex = /^\d{3}-\d{3}-\d{4}$/; // Regex for the xxx-xxx-xxxx format

            // Check if the phone number is empty or doesn't match the required format
            if (phoneInput.value.trim() === "") {
                phoneError.textContent = "Phone number is required.";
                phoneInput.classList.add("is-invalid");
                return false; // Prevent form submission if empty
            } else if (!phoneRegex.test(phoneInput.value)) {
                phoneError.textContent = "Phone number must be in the format xxx-xxx-xxxx.";
                phoneInput.classList.add("is-invalid");
                return false; // Prevent form submission if invalid format
            } else {
                phoneError.textContent = "";
                phoneInput.classList.remove("is-invalid");
                return true; // Allow form submission if valid
            }
        }

        // Attach the event listener for input changes
        document.getElementById("PhoneNumber").addEventListener("input", validatePhoneNumber);

        // Prevent form submission if validation fails
        document.querySelector("form").addEventListener("submit", function (event) {
            if (!validatePhoneNumber()) {
                event.preventDefault(); // Prevent form submission if phone number is invalid
            }
        });
    </script>
}
